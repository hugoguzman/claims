[{"/Users/gabebravo/Desktop/projects/fema-dupes/src/components/Header.js":"1","/Users/gabebravo/Desktop/projects/fema-dupes/src/components/App.js":"2","/Users/gabebravo/Desktop/projects/fema-dupes/src/components/ZipField.js":"3","/Users/gabebravo/Desktop/projects/fema-dupes/src/components/Map.js":"4","/Users/gabebravo/Desktop/projects/fema-dupes/src/components/List.js":"5","/Users/gabebravo/Desktop/projects/fema-dupes/src/index.js":"6","/Users/gabebravo/Desktop/projects/fema-dupes/src/components/ClaimsList.js":"7"},{"size":714,"mtime":1608170640063,"results":"8","hashOfConfig":"9"},{"size":992,"mtime":1608678065846,"results":"10","hashOfConfig":"9"},{"size":2436,"mtime":1608677942098,"results":"11","hashOfConfig":"9"},{"size":718,"mtime":1608177624254,"results":"12","hashOfConfig":"9"},{"size":1094,"mtime":1608678597006,"results":"13","hashOfConfig":"9"},{"size":396,"mtime":1608179780889,"results":"14","hashOfConfig":"9"},{"size":2787,"mtime":1608678796130,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11ipxgy",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"/Users/gabebravo/Desktop/projects/fema-dupes/src/components/Header.js",[],"/Users/gabebravo/Desktop/projects/fema-dupes/src/components/App.js",["33"],"import { useState, useEffect } from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useQuery } from 'react-query'\nimport axios from 'axios'\nimport Header from './Header'\nimport ZipField from './ZipField'\nimport Map from './Map'\nimport List from './List'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [zip, setZip] = useState('')\n  const fetchFemaClaims = () => axios.get(process.env.REACT_APP_AWS_URL, { params: { zip } })\n  const rcResp = useQuery('fetchFemaClaims', fetchFemaClaims, { enabled: false })\n\n  useEffect(() => {\n    zip && rcResp.refetch();\n  }, [zip])\n\n  return (\n    <div className={classes.root}>\n      <Header />\n      <ZipField setZip={setZip} />\n      <Grid container spacing={3} className={classes.gridContainer}>\n        <Map />\n        <List {...rcResp} />\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/gabebravo/Desktop/projects/fema-dupes/src/components/ZipField.js",[],"/Users/gabebravo/Desktop/projects/fema-dupes/src/components/Map.js",["34"],"/Users/gabebravo/Desktop/projects/fema-dupes/src/components/List.js",[],"/Users/gabebravo/Desktop/projects/fema-dupes/src/index.js",["35"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider, useQuery } from 'react-query'\nimport App from './components/App';\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <QueryClientProvider client={queryClient}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </QueryClientProvider>,\n  document.getElementById('root')\n);\n","/Users/gabebravo/Desktop/projects/fema-dupes/src/components/ClaimsList.js",["36","37","38"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n    '& .MuiDivider-inset': {\n      marginLeft: 0\n    }\n  },\n  inline: {\n    display: 'inline',\n  },\n}));\n\nexport default function ClaimsList({ claims }) {\n  const classes = useStyles();\n\n  return claims.map((claim, index) => {\n    const {\n      n,\n      censusTract,\n      dateOfLoss,\n      amountPaidOnBuildingClaim,\n      id,\n      floodZone, \n      amountPaidOnContentsClaim, \n      group_id,\n      elevationDifference,\n      obstructionType,\n      elevationCertificateIndicator, \n      primaryResidence,\n      yearOfLoss, \n      latitude,\n      longitude,\n      reportedCity,\n      state,\n      reportedZipcode,\n      countyCode,\n      totalContentsInsuranceCoverage,\n      originalNBDate,\n      totalBuildingInsuranceCoverage,\n    } = claim\n\n    return (\n      <List key={id} className={classes.root}>\n        <ListItem alignItems=\"flex-start\">\n          <ListItemText\n            primary={`${reportedCity}, ${state}`}\n            secondary={\n              <>\n                <Typography\n                  component=\"span\"\n                  variant=\"body2\"\n                  className={classes.inline}\n                  color=\"textPrimary\"\n                >\n                  {reportedZipcode + ' : '}\n                </Typography>\n                {`\n                  number: ${n}, \n                  censusTract: ${censusTract}, \n                  dateOfLoss: ${dateOfLoss}, \n                  amountPaidOnBuildingClaim: ${amountPaidOnBuildingClaim}, \n                  floodZone: ${floodZone}, \n                  amountPaidOnContentsClaim: ${amountPaidOnContentsClaim}, \n                  elevationDifference: ${elevationDifference}, \n                  obstructionType: ${obstructionType}, \n                  elevationCertificateIndicator: ${elevationCertificateIndicator}, \n                  primaryResidence: ${primaryResidence}, \n                  yearOfLoss: ${yearOfLoss}, \n                  countyCode: ${countyCode}, \n                  totalContentsInsuranceCoverage: ${totalContentsInsuranceCoverage}, \n                  originalNBDate: ${originalNBDate}, \n                  totalBuildingInsuranceCoverage: ${totalBuildingInsuranceCoverage}, \n                `}\n              </>\n            }\n          />\n        </ListItem>\n        <Divider variant=\"inset\" component=\"li\" />\n      </List>\n    )   \n  })\n}\n",{"ruleId":"39","severity":1,"message":"40","line":25,"column":6,"nodeType":"41","endLine":25,"endColumn":11,"suggestions":"42"},{"ruleId":"43","severity":1,"message":"44","line":23,"column":9,"nodeType":"45","endLine":23,"endColumn":158},{"ruleId":"46","severity":1,"message":"47","line":3,"column":44,"nodeType":"48","messageId":"49","endLine":3,"endColumn":52},{"ruleId":"46","severity":1,"message":"50","line":34,"column":7,"nodeType":"48","messageId":"49","endLine":34,"endColumn":15},{"ruleId":"46","severity":1,"message":"51","line":40,"column":7,"nodeType":"48","messageId":"49","endLine":40,"endColumn":15},{"ruleId":"46","severity":1,"message":"52","line":41,"column":7,"nodeType":"48","messageId":"49","endLine":41,"endColumn":16},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'rcResp'. Either include it or remove the dependency array.","ArrayExpression",["53"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useQuery' is defined but never used.","Identifier","unusedVar","'group_id' is assigned a value but never used.","'latitude' is assigned a value but never used.","'longitude' is assigned a value but never used.",{"desc":"54","fix":"55"},"Update the dependencies array to be: [rcResp, zip]",{"range":"56","text":"57"},[719,724],"[rcResp, zip]"]